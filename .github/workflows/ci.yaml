name: Rust CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  general-checks:
    runs-on: matterlabs-ci-runner-high-performance

    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          submodule: "recursive"

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly-2025-05-20
          components: clippy, rustfmt

      - name: Setup cache dependencies
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Check formatting
        run: cargo fmt --all --check

      # no-default-features is set because the code is a mix of GPU/non-GPU compliant code
      # the flag needs to be removed once we allow both version to be build and control it via env var
      # these changes will be removed once https://github.com/matter-labs/prover-subsystem-internal/issues/49 is done
      - name: Run Clippy
        run: cargo clippy --no-default-features -- -D warnings

      - name: Build
        run: cargo build --verbose --release --no-default-features

  gpu-build:
    runs-on: [ matterlabs-ci-runner-high-performance ]
    strategy:
      matrix:
        cuda: [ "12.9.1-devel-ubuntu22.04" ]
        package: [ "zksync_os_prover_service" ]
    container:
      image: nvidia/cuda:${{ matrix.cuda }}
    env:
      RUST_TOOLCHAIN: nightly-2025-05-20
      BELLMAN_CUDA_DIR: ${{ github.workspace }}/bellman-cuda
      CUDAARCHS: 89

    steps:
      - name: Prepare environment
        shell: 'bash -ex {0}'
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          apt update && apt install -y cmake git jq libssl-dev pkg-config wget curl \
            build-essential libclang-dev
          echo "/usr/local/nvidia/bin:/usr/local/cuda/bin" >> $GITHUB_PATH

      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          submodules: "recursive"

      - name: Install Rust toolchain
        uses: moonrepo/setup-rust@ede6de059f8046a5e236c94046823e2af11ca670 # v1.2.2
        env:
          # To fix rate limiting issues with GitHub API
          GITHUB_TOKEN: ${{ github.token }}
        with:
          inherit-toolchain: true
          components: 'rustfmt,clippy'
          bins: 'cargo-nextest'
          cache: false
  
      - name: Setup CMAKE
        run: |
          curl -LO https://github.com/Kitware/CMake/releases/download/v3.30.2/cmake-3.30.2-linux-x86_64.sh && \
            chmod +x cmake-3.30.2-linux-x86_64.sh && \
            ./cmake-3.30.2-linux-x86_64.sh --skip-license --prefix=/usr/local

      - name: Check CUDA version
        run: |
          nvcc --version

      - name: Prepare bellman-cuda directory
        shell: 'bash -ex {0}'
        run: |
          release=($(curl --silent https://api.github.com/repos/matter-labs/era-bellman-cuda/releases | jq -r '.[0] | .name, .tarball_url, .assets[0].browser_download_url'))
          curl --silent -L "${release[1]}" --output bellman-cuda-source.tar.gz
          curl --silent -L "${release[2]}" --output bellman-cuda.tar.gz
          mkdir -p bellman-cuda
          tar xvfz bellman-cuda.tar.gz -C ./bellman-cuda
          tar xvfz bellman-cuda-source.tar.gz -C ./bellman-cuda --strip-components=1 --wildcards \*/src/
          
      - name: Build and archive test
        shell: 'bash -ex {0}'
        env:
          CUDAARCHS: 89
          # This is a special mandatory hack to transfer test binary from one machine to another.
          # We must use a dummy `./` path addition in the workspace path /home/runner/_work
          # to prevent GitHub Actions to replace it to the mapped `/__w` folder in the docker container.
          # This is required to make sure that the paths to workspace artifacts like server_app.bin
          # are correct inside prebuilt binary.
          # This variable overwrites the default relative `./` in the .cargo/config.toml.
          WORKSPACE_DIR: "/home/./runner/_work/zksync-airbender-prover/zksync-airbender-prover"
        run: |
          cargo nextest archive --release --profile ci -p ${{ matrix.package }} \
            --features gpu --archive-file ${{ matrix.package }}-${{ matrix.cuda }}-test-binary.tar.zst

      - name: Upload tests
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ${{ matrix.package }}-${{ matrix.cuda }}-test-binary
          path: ${{ matrix.package }}-${{ matrix.cuda }}-test-binary.tar.zst
          if-no-files-found: error

  gpu-test:
    runs-on: [ matterlabs-ci-gpu-runner ]
    strategy:
      matrix:
        cuda: [ "12.9.1-devel-ubuntu22.04" ]
        package: [ "zksync_os_prover_service" ]
    needs: gpu-build
    env:
      RUST_TOOLCHAIN: nightly-2025-05-20
      BELLMAN_CUDA_DIR: ${{ github.workspace }}/bellman-cuda

    steps:
      - name: Prepare environment
        run: |
          echo "/usr/local/nvidia/bin:/usr/local/cuda/bin" >> $GITHUB_PATH

      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          submodules: "recursive"

      - name: Check Nvidia driver version
        run: |
          nvidia-smi

      - name: Install Rust toolchain
        uses: moonrepo/setup-rust@ede6de059f8046a5e236c94046823e2af11ca670 # v1.2.2
        env:
          # To fix rate limiting issues with GitHub API
          GITHUB_TOKEN: ${{ github.token }}
        with:
          inherit-toolchain: true
          components: 'rustfmt,clippy'
          bins: 'cargo-nextest'
          cache: false

      - name: Prepare bellman-cuda directory
        shell: 'bash -ex {0}'
        run: |
          release=($(curl --silent https://api.github.com/repos/matter-labs/era-bellman-cuda/releases | jq -r '.[0] | .name, .tarball_url, .assets[0].browser_download_url'))
          curl --silent -L "${release[1]}" --output bellman-cuda-source.tar.gz
          curl --silent -L "${release[2]}" --output bellman-cuda.tar.gz
          mkdir -p bellman-cuda
          tar xvfz bellman-cuda.tar.gz -C ./bellman-cuda
          tar xvfz bellman-cuda-source.tar.gz -C ./bellman-cuda --strip-components=1 --wildcards \*/src/

      - name: Download prebuilt tests
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: ${{ matrix.package }}-${{ matrix.cuda }}-test-binary
  
      - name: Run GPU test binary
        shell: 'bash -ex {0}'
        run: |
          cargo nextest run -E 'binary(prover)' --no-capture \
            --archive-file "${{ matrix.package }}-${{ matrix.cuda }}-test-binary.tar.zst" \
              --workspace-remap ${{ github.workspace }}

